/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.56
 * Generated at: 2022-03-12 11:49:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class gCalTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(6);
    _jspx_dependants.put("jar:file:/F:/tools/apache-tomcat-9.0.56/wtpwebapps/test/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/F:/tools/apache-tomcat-9.0.56/wtpwebapps/test/WEB-INF/lib/jstl-1.2.jar!/META-INF/sql.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/F:/tools/apache-tomcat-9.0.56/wtpwebapps/test/WEB-INF/lib/jstl-1.2.jar!/META-INF/x.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/F:/tools/apache-tomcat-9.0.56/wtpwebapps/test/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/F:/tools/apache-tomcat-9.0.56/wtpwebapps/test/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1645020144116L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("  \n");
      out.write(" \n");
      out.write("   \n");
      out.write("  \n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\">\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css\">\n");
      out.write("<link rel=\"stylesheet\" href=\"https://pro.fontawesome.com/releases/v5.10.0/css/all.css\"\n");
      out.write("	  integrity=\"sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p\"\n");
      out.write("	  crossorigin=\"anonymous\"/>\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js\"></script>\n");
      out.write("<link href=\"css/main.css\" rel=\"stylesheet\"></link>\n");
      out.write("<script src=\"js/main.js\"></script>\n");
      out.write("<script src=\"js/locales/ko.js\"></script>\n");
      out.write("<title>Insert title here</title>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("/* https://amadoo.tistory.com/89 */\n");
      out.write("\n");
      out.write("$(document).ready(function() {\n");
      out.write("	var Calendar = FullCalendar.Calendar;\n");
      out.write("	\n");
      out.write("	var calendarEl1 = document.getElementById('calendar');\n");
      out.write("	var calendarEl2 = document.getElementById('dates');\n");
      out.write("	// initialize the calendar\n");
      out.write("	// -----------------------------------------------------------------\n");
      out.write("	\n");
      out.write("	var calendar1 = new Calendar(calendarEl1, {\n");
      out.write("		locale: 'ko', // 국가 설정\n");
      out.write("		\n");
      out.write("		headerToolbar: { // 헤더 툴바 설정\n");
      out.write("	    	left: 'prev', // 왼쪽 (한달 전, 한달 후, 오늘로 이동 버튼)\n");
      out.write("	    	center: 'title', // 가운데 (년 월 표시)\n");
      out.write("	    	right: 'today,next' // 오른쪽 (월단위 지도, 주단위 지도, 일단위 지도)\n");
      out.write("	  	},\n");
      out.write("	  	initialView: 'dayGridMonth',\n");
      out.write("		selectable: true, // 달력일자를 드래그 선택 가능한지 설정\n");
      out.write("		\n");
      out.write("	    select: function(info) {\n");
      out.write("	    	//customCode : date를 클릭하거나 드래그하면 input에 시작날짜와 종료날짜가 입\n");
      out.write("    		$('#startDate').val(info.startStr);\n");
      out.write("    		$('#endDate').val(info.endStr);\n");
      out.write("	    },\n");
      out.write("	    \n");
      out.write("	    eventAdd: function(obj) { // 이벤트가 추가되면 콘솔에 해당 object.toString()\n");
      out.write("	    	console.log(obj);\n");
      out.write("    	},\n");
      out.write("    	\n");
      out.write("    	eventChange: function(obj) { // 이벤트가 수정되면 콘솔에 해당 object.toString()\n");
      out.write("    		if( confirm('수정하시겠습니까?') == true ) {\n");
      out.write("    			\n");
      out.write("    		} else {\n");
      out.write("    			return;\n");
      out.write("    		}\n");
      out.write("    	},\n");
      out.write("    	\n");
      out.write("    	eventRemove: function(obj){ // 이벤트가 삭제되면 콘솔에 해당 object.toString()\n");
      out.write("    		console.log(obj);\n");
      out.write("    	}, \n");
      out.write("		eventClick: function(info) {\n");
      out.write("	    	//customCode : 캘린더에 등록된 이벤트를 클릭하면 confirm창을 띄워 true일 경우 수정 페이지로 이동\n");
      out.write("	    	$('#modalBtn1').trigger('click');\n");
      out.write("    		$('.modal-header #plan-name').text(info.event.title);\n");
      out.write("    		\n");
      out.write("    		var calendar2 = new Calendar(calendarEl2, {\n");
      out.write("    			locale: 'ko', // 국가 설정\n");
      out.write("    			\n");
      out.write("    			headerToolbar: { // 헤더 툴바 설정\n");
      out.write("    		    	left: 'title',\n");
      out.write("    		    	center : '',\n");
      out.write("    		    	right:''    		    	\n");
      out.write("    		  	},\n");
      out.write("    		  	\n");
      out.write("    			initialView: 'timeGridDay',\n");
      out.write("    			\n");
      out.write("    			initialDate: info.event.start,\n");
      out.write("    			\n");
      out.write("    			selectable: true, // 달력일자를 드래그 선택 가능한지 설정\n");
      out.write("    			    		    \n");
      out.write("    		    eventAdd: function(obj) { // 이벤트가 추가되면 콘솔에 해당 object.toString()\n");
      out.write("    		    	console.log(obj);\n");
      out.write("    	    	},\n");
      out.write("    	    	\n");
      out.write("    	    	eventChange: function(obj) { // 이벤트가 수정되면 콘솔에 해당 object.toString()\n");
      out.write("    				console.log(obj);\n");
      out.write("    	    	},\n");
      out.write("    	    	\n");
      out.write("    	    	eventRemove: function(obj){ // 이벤트가 삭제되면 콘솔에 해당 object.toString()\n");
      out.write("    	    		console.log(obj);\n");
      out.write("    	    	}, \n");
      out.write("\n");
      out.write("    	    	eventClick: function(info) {\n");
      out.write("    	    		console.log(info);\n");
      out.write("    			}\n");
      out.write("    		});\n");
      out.write("\n");
      out.write("    		getAllPlans(calendar2);    		\n");
      out.write("    		calendar2.render();\n");
      out.write("		}\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	// DB에 저장된 일정 불러와 달력에 표시하기\n");
      out.write("	function getAllPlans(calendar)  {\n");
      out.write("		$.ajax({\n");
      out.write("	 			url : \"getAllPlans.do\" ,\n");
      out.write("	 			type : \"POST\",\n");
      out.write("	 			success : function(data) {\n");
      out.write("	 				for (var i = 0; i < data.length; i++ ) {\n");
      out.write("	 					calendar.addEvent({\n");
      out.write("	 						title : data[i].planName,\n");
      out.write("	 						start : data[i].startDate,\n");
      out.write("	 						end : data[i].endDate,\n");
      out.write("	 					})\n");
      out.write("	 				}		\n");
      out.write("	 			},\n");
      out.write("	 			error : function(data) {\n");
      out.write("	 				console.log(data);\n");
      out.write("	 				alert('오류');\n");
      out.write("	 			}\n");
      out.write("	 		})\n");
      out.write("	};\n");
      out.write("	\n");
      out.write("	// 캘린더 다시 불러오기\n");
      out.write("	calendar1.render();\n");
      out.write("	// getAllPlans 메서드 호출 \n");
      out.write("	getAllPlans(calendar1);\n");
      out.write("	\n");
      out.write("	//customCode : 일정 이름, startDate, endDate Create 버튼 눌렀을 때\n");
      out.write("	$('#submit').click(function(e) {\n");
      out.write("		// 기본 기능인 form submit 기능 차단\n");
      out.write("		e.preventDefault();\n");
      out.write("		\n");
      out.write("		var frm = $('#frm');\n");
      out.write("		var planName = $('#planName').val();\n");
      out.write("		var startDate = $('#startDate').val();\n");
      out.write("		var endDate = $('#endDate').val();\n");
      out.write("		\n");
      out.write("		// 1st Validation : input null check\n");
      out.write("		if( planName == \"\" ) {\n");
      out.write("			alert('일정 이름을 입력해주세요.');\n");
      out.write("			return false;\n");
      out.write("		} else if( startDate ==\"\" || endDate ==\"\" ) {\n");
      out.write("			alert('일자를 선택해주세요.');\n");
      out.write("			return false;\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		// 2nd Validation : 선택한 일정이 맞는지 다시 한 번 체크\n");
      out.write("		if( confirm('선택한 일자로 일정을 만들까요?') == true ) {\n");
      out.write("			\n");
      out.write("			// 달력에 생성한 일정 박스 생성\n");
      out.write("			calendar.addEvent({\n");
      out.write("				title : planName,\n");
      out.write("				start : startDate,\n");
      out.write("				end : endDate\n");
      out.write("			});\n");
      out.write("			\n");
      out.write("			// 선택한 값을 json 형태 자료로 생성\n");
      out.write("			let json = {\n");
      out.write("					planName : planName,\n");
      out.write("					startDate : startDate,\n");
      out.write("					endDate : endDate\n");
      out.write("			};\n");
      out.write("			\n");
      out.write("			// ajax로 json 객체를 controller로 보내서 db 추가\n");
      out.write("			$.ajax({\n");
      out.write("				url : 'insertPlan',\n");
      out.write("				type : 'post',\n");
      out.write("				contentType : 'application/json; charset=UTF-8',\n");
      out.write("				data : JSON.stringify(json),\n");
      out.write("				success : function(data) {\n");
      out.write("					console.log(data);\n");
      out.write("				},\n");
      out.write("				error: function() {\n");
      out.write("					console.log('오류');\n");
      out.write("				}\n");
      out.write("			});\n");
      out.write("			console.log(JSON.stringify(json));\n");
      out.write("			// form에 있던 값을 리셋시킴\n");
      out.write("			frm[0].reset();\n");
      out.write("			\n");
      out.write("			// calendar를 다시 세팅\n");
      out.write("			calendar.render();\n");
      out.write("		} else {\n");
      out.write("			return false;\n");
      out.write("		}\n");
      out.write("	})\n");
      out.write("});					\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<style>\n");
      out.write(".modal-dialog {\n");
      out.write("	height : 100%;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".modal-content {\n");
      out.write("	height : 80%;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#modalCloseBtn {\n");
      out.write("	font-size: 4rem;\n");
      out.write("	cursor: pointer;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".modal-header #plan-date {\n");
      out.write("	line-height : 100%;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write(".modal-body #map-container {\n");
      out.write("	width : 40%;\n");
      out.write("	height : 100%;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".modal-body #map-container #map {\n");
      out.write("	height : 65%;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".modal-body #map-container #locations {\n");
      out.write("	height : 30%;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".modal-body #plan-container {\n");
      out.write("	width : 55%;\n");
      out.write("	height : 100%;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".modal-body #plan-container #dates {\n");
      out.write("	height : 95%;\n");
      out.write("}\n");
      out.write("/*\n");
      out.write(".modal-body #plan-container #desc {\n");
      out.write("	height : 65%;\n");
      out.write("}\n");
      out.write("*/\n");
      out.write(".body-container #feed-header {\n");
      out.write("	width: 100%;\n");
      out.write("	height : 200px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".body-container #feed-header #profile-img {\n");
      out.write("	border: 1px solid black;\n");
      out.write("	border-radius: 50%;\n");
      out.write("	width: 180px;\n");
      out.write("	height: 180px;\n");
      out.write("	border-width: thick;\n");
      out.write("	border-color: #598DCD;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".body-container #feed-header #profile-left,#profile-right {\n");
      out.write("	border: 1px solid black;\n");
      out.write("	width: 40%;\n");
      out.write("	height: 90%;\n");
      out.write("	border-color: #598DCD;\n");
      out.write("	border-width: thick;\n");
      out.write("}\n");
      out.write("\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("<div class=\"body-container container mt-5\">\n");
      out.write("	\n");
      out.write("	<div id=\"feed-header\" class=\"d-flex justify-content-around\">\n");
      out.write("		<div id=\"profile-left\" class=\"shadow p-3 mb-5 bg-body\"></div>\n");
      out.write("		<div id=\"profile-img\" class=\"shadow p-3 mb-5 bg-body\"></div>\n");
      out.write("		<div id=\"profile-right\" class=\"shadow p-3 mb-5 bg-body\"></div>\n");
      out.write("	</div>\n");
      out.write("	\n");
      out.write("	<hr />\n");
      out.write("\n");
      out.write("	<div class=\"d-flex justify-content-between mt-4\">\n");
      out.write("		<!-- create plan form -->\n");
      out.write("		<div class=\"border rounded p-3\">\n");
      out.write("			<form action=\"planner\" id=\"frm\" method=\"post\">\n");
      out.write("				<div class=\"form-group\">\n");
      out.write("					<label for=\"planName\">일정 이름</label>\n");
      out.write("					<input type=\"text\" name=\"planName\" id=\"planName\" class=\"form-control\" size=\"20\"/>\n");
      out.write("				</div>\n");
      out.write("				<div class=\"form-group\">\n");
      out.write("					<label for=\"startDate\">시작 일자</label>\n");
      out.write("					<input type=\"text\" name=\"startDate\" id=\"startDate\" class=\"form-control bg-light\" size=\"20\" readonly=\"readonly\"/>\n");
      out.write("				</div>\n");
      out.write("				<div class=\"form-group\">\n");
      out.write("					<label for=\"endDate\">종료 일자</label>\n");
      out.write("					<input type=\"text\" name=\"endDate\" id=\"endDate\" class=\"form-control bg-light\" size=\"20\" readonly=\"readonly\"/>\n");
      out.write("				</div>\n");
      out.write("	\n");
      out.write("				<div class=\"d-flex justify-content-end mp_btn\">\n");
      out.write("					<input type=\"submit\" class=\"btn btn-sm btn-primary mr-1\" id=\"submit\" value=\"Create\"/>\n");
      out.write("					<input type=\"reset\" class=\"btn btn-sm btn-danger px-2\" value=\"Clear\" />\n");
      out.write("				</div>\n");
      out.write("			</form>\n");
      out.write("		</div>\n");
      out.write("		<!-- fullcalendar div  -->\n");
      out.write("		<div id=\"calendar\" class=\"container\"></div>\n");
      out.write("	</div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<!-- modal button -->\n");
      out.write("<input type=\"hidden\" id=\"modalBtn1\" data-toggle=\"modal\" data-target=\"#myModal\" value=\"modal\" />\n");
      out.write("\n");
      out.write("<!-- modal 창 -->\n");
      out.write("<div class=\"modal fade\" id=\"myModal\" role=\"dialog\">\n");
      out.write("	<div class=\"modal-dialog modal-dialog-centered modal-xl d-block\">\n");
      out.write("		<button type=\"button\" id=\"modalCloseBtn\" class=\"btn btn-xl btn-default text-white text-weight-bold display-1 float-right\" data-dismiss=\"modal\">&times;</button>\n");
      out.write("		<div class=\"modal-content\">\n");
      out.write("			<div class=\"modal-header bg-light d-flex justify-content-start\">\n");
      out.write("				<h4 id=\"plan-name\" class=\"modal-title display-4\"></h4>\n");
      out.write("			</div>\n");
      out.write("			\n");
      out.write("			<div class=\"modal-body bg-light d-flex justify-content-center\">\n");
      out.write("				<div id=\"map-container\" class=\"d-block\">\n");
      out.write("					<div id=\"map\" class=\"border rounded bg-warning mb-2 text-white text-weight-bold\">\n");
      out.write("						KAKAO MAP\n");
      out.write("					</div>\n");
      out.write("					<div id=\"locations\" class=\"border rounded bg-light overflow-auto\">\n");
      out.write("						<ul id=\"locations-list\" class=\"list-group\">\n");
      out.write("							<li class=\"list-group-item row d-flex\">\n");
      out.write("								<div class=\"border location-name col-7 overflow-hidden ml-1 mr-1 px-1\">location name</div>\n");
      out.write("								<div class=\"border location-likes col-2 mr-1 px-1\">likes</div>\n");
      out.write("								<div class=\"border col-1 mr-1 px-1\">+</div>\n");
      out.write("								<div class=\"border col-1 px-1\">-</div>\n");
      out.write("							</li>\n");
      out.write("							<li class=\"list-group-item row d-flex\">\n");
      out.write("								<div class=\"border location-name col-7 overflow-hidden ml-1 mr-1 px-1\">location name</div>\n");
      out.write("								<div class=\"border location-likes col-2 mr-1 px-1\">likes</div>\n");
      out.write("								<div class=\"border col-1 mr-1 px-1\">+</div>\n");
      out.write("								<div class=\"border col-1 px-1\">-</div>\n");
      out.write("							</li>\n");
      out.write("							<li class=\"list-group-item row d-flex\">\n");
      out.write("								<div class=\"border location-name col-7 overflow-hidden ml-1 mr-1 px-1\">location name</div>\n");
      out.write("								<div class=\"border location-likes col-2 mr-1 px-1\">likes</div>\n");
      out.write("								<div class=\"border col-1 mr-1 px-1\">+</div>\n");
      out.write("								<div class=\"border col-1 px-1\">-</div>\n");
      out.write("							</li>\n");
      out.write("							<li class=\"list-group-item row d-flex\">\n");
      out.write("								<div class=\"border location-name col-7 overflow-hidden ml-1 mr-1 px-1\">location name</div>\n");
      out.write("								<div class=\"border location-likes col-2 mr-1 px-1\">likes</div>\n");
      out.write("								<div class=\"border col-1 mr-1 px-1\">+</div>\n");
      out.write("								<div class=\"border col-1 px-1\">-</div>\n");
      out.write("							</li>\n");
      out.write("							<li class=\"list-group-item row d-flex\">\n");
      out.write("								<div class=\"border location-name col-7 overflow-hidden ml-1 mr-1 px-1\">location name</div>\n");
      out.write("								<div class=\"border location-likes col-2 mr-1 px-1\">likes</div>\n");
      out.write("								<div class=\"border col-1 mr-1 px-1\">+</div>\n");
      out.write("								<div class=\"border col-1 px-1\">-</div>\n");
      out.write("							</li>\n");
      out.write("						</ul>\n");
      out.write("					</div>\n");
      out.write("				</div>\n");
      out.write("				\n");
      out.write("				<div id=\"plan-container\" class=\"d-block ml-2\">\n");
      out.write("					<ul class=\"nav nav-tabs align-bottom\">\n");
      out.write("					  <li class=\"nav-item\">\n");
      out.write("					    <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Active</a>\n");
      out.write("					  </li>\n");
      out.write("					  <li class=\"nav-item\">\n");
      out.write("					    <a class=\"nav-link\" href=\"#\">Link</a>\n");
      out.write("					  </li>\n");
      out.write("					  <li class=\"nav-item\">\n");
      out.write("					    <a class=\"nav-link\" href=\"#\">Link</a>\n");
      out.write("					  </li>\n");
      out.write("					  <li class=\"nav-item\">\n");
      out.write("					    <a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a>\n");
      out.write("					  </li>\n");
      out.write("					</ul>\n");
      out.write("					<div id=\"dates\" class=\"container rounded bg-light mb-2 d-flex\">\n");
      out.write("					</div>\n");
      out.write("					<!-- \n");
      out.write("					<div id=\"desc\" class=\"border rounded mb-2 overflow-auto\">\n");
      out.write("						<ul class=\"list-group\">\n");
      out.write("							<li class=\"list-group-item\">desc 1</li>\n");
      out.write("							<li class=\"list-group-item\">desc 2</li>\n");
      out.write("							<li class=\"list-group-item\">desc 3</li>\n");
      out.write("							<li class=\"list-group-item\">desc 4</li>\n");
      out.write("							<li class=\"list-group-item\">desc 5</li>\n");
      out.write("							<li class=\"list-group-item\">desc 6</li>\n");
      out.write("							<li class=\"list-group-item\">desc 7</li>\n");
      out.write("							<li class=\"list-group-item\">desc 8</li>\n");
      out.write("							<li class=\"list-group-item\">desc 9</li>\n");
      out.write("							<li class=\"list-group-item\">desc 10</li>\n");
      out.write("						</ul>\n");
      out.write("					</div>\n");
      out.write("					 -->\n");
      out.write("				</div>				\n");
      out.write("			</div>\n");
      out.write("			<div class=\"modal-footer bg-light mb-2\"></div>\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
